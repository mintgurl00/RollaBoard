<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "com.spring.rollaboard.task.TaskMapper">

	<resultMap type = "TaskVO" id = "TaskResultMap">
		<result property = "id" column = "ID"/>
		<result property = "name" column = "NAME"/>
		<result property = "description" column = "DESCRIPTION"/>
		<result property = "status" column = "STATUS"/>
		<result property = "section_id" column = "SECTION_ID"/>
		<result property = "start_date" column = "START_DATE"/>
		<result property = "due_date" column = "DUE_DATE"/>
		<result property = "cre_date" column = "CRE_DATE"/>
		<result property = "priority" column = "PRIORITY"/>
		
	</resultMap>
	
	<select id = "getTask" resultMap = "TaskResultMap">
		SELECT * FROM task WHERE id = #{id}
	</select>
	
	<select id ="getMyTasks" parameterType = "String" resultMap = "TaskResultMap">
		SELECT A.ID, A.NAME, F.NAME as DESCRIPTION, STATUS, SECTION_ID, START_DATE, DUE_DATE, CRE_DATE, PRIORITY
		FROM task A JOIN task_role B ON A.ID = B.TASK_ID JOIN role C ON B.ROLE_ID = C.ID JOIN role_mem D ON C.id = D.ROLE_ID JOIN section E ON A.SECTION_ID = E.ID JOIN board F ON E.BOARD_ID = F.ID
		WHERE D.MEM_ID = #{mem_id}
	</select>
	
	<delete id = "deleteTask" parameterType = "int">
		DELETE FROM task WHERE ID = #{id}
	</delete>
	
	<!-- getTasksByBoard -->
	<select id="getTasksByBoard" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id 
    		AND board_id=#{board_id} 
	</select>
	
	<!-- getTasksByBoard2 -->
	<select id="getTasksByBoard2" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
	</select>
	
	<!-- getTasksByBoard3(condition & sort) -->
	<select id="getTasksByBoard3" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    		${conditionQuery}
    	ORDER BY
    		${sortQuery}
	</select>
	
	<!-- getTasksByBoard4(condition) -->
	<select id="getTasksByBoard4" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    		${conditionQuery}
	</select>
	
	<!-- getTasksByBoard5(sort) -->
	<select id="getTasksByBoard5" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    	ORDER BY
    		${sortQuery}
	</select>
	
	<select id="getTasks" resultMap="TaskResultMap">	
		SELECT * FROM task 
	</select>
	
	<insert id = "createTask" parameterType = "com.spring.rollaboard.task.TaskVO">		
		INSERT INTO task (id, name, description, section_id, start_date, due_date, cre_date, priority)
		VALUES (seq_task.NEXTVAL, #{name}, #{description}, #{section_id}, #{start_date}, #{due_date}, #{cre_date}, #{priority})
		
	</insert>
	
	<insert id = "createTaskWithRole" parameterType = "com.spring.rollaboard.task.TaskVO">
		INSERT ALL
			INTO task (id, name, description, section_id, start_date, due_date, cre_date, priority)
			VALUES (seq_task.NEXTVAL, #{name}, #{description}, #{section_id}, #{start_date}, #{due_date}, #{cre_date}, #{priority})
			INTO task_role (TASK_ID, ROLE_ID) VALUES (seq_task.NEXTVAL, #{role_id})
				SELECT * FROM DUAL
	</insert>
	
	<update id = "updateTask" parameterType = "com.spring.rollaboard.task.TaskVO">
		UPDATE task SET DESCRIPTION = #{description}, 
					 NAME = #{name}, 
					 STATUS = #{status}, 
					 SECTION_ID = #{section_id}, 
					 START_DATE = #{start_date}, 
					 DUE_DATE = #{due_date}, 
					 PRIORITY = #{priority} 
					 WHERE ID = #{id}
	</update>
	
	<insert id = "taskToRole" parameterType = "map">
		INSERT INTO task_role (TASK_ID, ROLE_ID) VALUES (#{task_id}, #{role_id})
	</insert>
	
	
	
	
	
	
	
	<!-- 
	
	isHavingPreTask
	<select id = "isHavingPreTask" resultType="int">
		SELECT COUNT(*) 
		FROM task_conn
		WHERE task_id=#{id}
			AND ref_level > 0
	</select>
	
	isHavingPostTask
	<select id = "isHavingPostTask" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		FROM task_conn tc1, task_conn0 tc2
		where tc1.root_task_id=tc2.root_task_id
		    AND tc2.task_id=#{id}
		    AND tc2.ref_level < tc1.ref_level
		]]> 
	</select>
	
	isConnectedTask
	<select id = "isConnectedTask" resultType="int">
		SELECT COUNT(*) 
		FROM task_conn
		WHERE task_id=#{id}
	</select>
	
	addPostTask1of2
	<update id = "addPostTask1of2" parameterType = "map">
		UPDATE task_conn
		SET root_task_id=#{taskId}, ref_level=ref_level+1
		WHERE root_task_id=#{preTaskId}
	</update>
	addPostTask2of2
	<insert id = "addPostTask2of2" parameterType = "map">
		INSERT ALL
		    INTO task_conn(root_task_id, task_id, ref_level)
		    VALUES( r_t_rid, #{taskId}, r_t_lv-1 )
		SELECT t.root_task_id r_t_rid, t.task_id r_t_id, t.ref_level r_t_lv
		FROM task_conn t
		WHERE task_id=#{postTaskId}
	</insert>
	
	addPreTask
	<insert id = "addPreTask" parameterType = "map">
		INSERT ALL
		    INTO task_conn(root_task_id, task_id, ref_level)
		    VALUES( r_t_rid, #{taskId}, r_t_lv+1 )
		SELECT t.root_task_id r_t_rid, t.task_id r_t_id, t.ref_level r_t_lv
		FROM task_conn0 t
		WHERE task_id=#{preTaskId}
	</insert>
	
	createPreTask
	<insert id="createPreTask" parameterType="map">
		INSERT ALL
		    INTO task_conn(root_task_id, task_id, ref_level) VALUES(#{preTaskId}, #{preTaskId}, 0)
		    INTO task_conn(root_task_id, task_id, ref_level) VALUES(#{preTaskId}, #{taskId}, 1) 
		SELECT * FROM DUAL
	</insert>
	
	insertByPreTask1of2
	<update id = "insertByPreTask1of2" parameterType = "map">
		<![CDATA[
		UPDATE task_conn
		SET ref_level=ref_level+1
		WHERE ref_level>(SELECT ref_level FROM task_conn0 WHERE task_id=#{preTaskId})
		]]> 
	</update>	
	insertByPreTask2of2
	<insert id = "insertByPreTask2of2" parameterType = "map">
		INSERT ALL
		    INTO task_conn(root_task_id, task_id, ref_level)
		    VALUES( r_t_rid, #{taskId}, r_t_lv+1 )
		SELECT t.root_task_id r_t_rid, t.task_id r_t_id, t.ref_level r_t_lv
		FROM task_conn t
		WHERE task_id=#{preTaskId}
	</insert>
	
	insertByPostTask1of2
	<update id = "insertByPostTask1of2" parameterType = "map">
		<![CDATA[
		UPDATE task_conn
		SET ref_level=ref_level+1
		WHERE ref_level>=(SELECT ref_level FROM task_conn0 WHERE task_id=#{postTaskId})
		]]> 
	</update>	
	insertByPostTask2of2
	<insert id = "insertByPostTask2of2" parameterType = "map">
		INSERT ALL
		    INTO task_conn(root_task_id, task_id, ref_level)
		    VALUES( r_t_rid, #{taskId}, r_t_lv-1 )
		SELECT t.root_task_id r_t_rid, t.task_id r_t_id, t.ref_level r_t_lv
		FROM task_conn t
		WHERE task_id=#{postTaskId}
	</insert> -->
</mapper>