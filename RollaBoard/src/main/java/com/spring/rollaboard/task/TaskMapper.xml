<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "com.spring.rollaboard.task.TaskMapper">

	<resultMap type = "TaskVO" id = "TaskResultMap">
		<result property = "id" column = "ID"/>
		<result property = "name" column = "NAME"/>
		<result property = "description" column = "DESCRIPTION"/>
		<result property = "status" column = "STATUS"/>
		<result property = "section_id" column = "SECTION_ID"/>
		<result property = "start_date" column = "START_DATE"/>
		<result property = "due_date" column = "DUE_DATE"/>
		<result property = "cre_date" column = "CRE_DATE"/>
		<result property = "priority" column = "PRIORITY"/>
		<result property = "location" column = "LOCATION"/> <!-- 수민 태스크 위치 추가 -->
	</resultMap>
	
	<resultMap type = "TaskVOLite" id = "TaskResultMap2">
		<result property="id" column="ID" />
		<result property="name" column="NAME" />
		<result property="sectionName" column="SEC_NAME" />
		<result property="status" column="STATUS" />
	</resultMap>
	
	<select id = "getTask" resultMap = "TaskResultMap">
		SELECT * FROM task WHERE id = #{id}
	</select>
	
	<select id ="getMyTasks" parameterType = "String" resultMap = "TaskResultMap">
		SELECT A.ID, A.NAME, F.NAME as DESCRIPTION, STATUS, SECTION_ID, START_DATE, DUE_DATE, CRE_DATE, PRIORITY
		FROM task A JOIN task_role B ON A.ID = B.TASK_ID JOIN role C ON B.ROLE_ID = C.ID JOIN role_mem D ON C.id = D.ROLE_ID JOIN section E ON A.SECTION_ID = E.ID JOIN board F ON E.BOARD_ID = F.ID
		WHERE D.MEM_ID = #{mem_id}
	</select>
	
	<delete id = "deleteTask" parameterType = "int">
		DELETE FROM task WHERE ID = #{id}
	</delete>
	
	<!-- getTasksByBoard -->
	<select id="getTasksByBoard" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id 
    		AND board_id=#{board_id} 
	</select>
	
	<!-- getTasksByBoard2 -->
	<select id="getTasksByBoard2" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    	ORDER BY DECODE(STATUS, 'COMPLETE', 1, 2 ) DESC 
	</select>
	
	<!-- getTasksByBoard3(condition & sort) -->
	<select id="getTasksByBoard3" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    		${conditionQuery}
    	ORDER BY
    		${sortQuery}
	</select>
	
	<!-- getTasksByBoard4(condition) -->
	<select id="getTasksByBoard4" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    		${conditionQuery}
	</select>
	
	<!-- getTasksByBoard5(sort) -->
	<select id="getTasksByBoard5" parameterType="map" resultMap="TaskResultMap">
		SELECT *
		FROM task ta, section se
		WHERE ta.SECTION_ID=se.id
    		AND board_id=#{board_id}
    		AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%')
    	ORDER BY
    		${sortQuery}
	</select>
	
	<!-- getTaskIdList (그냥 태스크 간단한 정보)-->
	<select id="getTaskIdList" parameterType="map" resultMap="TaskResultMap2">
		SELECT ta.id id, ta.name name, se.name sec_name, ta.status status
		FROM task ta
			INNER JOIN section se
			ON ta.section_id=se.id
		WHERE se.board_id=#{board_id}
		<if test="task_name != null">
			AND ta.name=#{task_name}
		</if>
	</select>
	
	<!-- getTaskId
	<select id="getTaskIdList" parameterType="map" resultMap="TaskResultMap2">
		SELECT ta.id id
		FROM task ta
			INNER JOIN section se
			ON ta.section_id=se.id
		WHERE se.board_id=#{board_id} AND ta.name=#{task_name}
	</select> -->
	
	<select id="getTasks" resultMap="TaskResultMap">	
		SELECT * FROM task 
	</select>
	
	<!-- 수민 태스크 위치 추가 -->
	<insert id = "createTask" parameterType = "com.spring.rollaboard.task.TaskVO">		
		INSERT INTO task (id, name, description, status, section_id, start_date, due_date, cre_date, priority, location)
		VALUES (seq_task.NEXTVAL, #{name}, #{description}, #{status}, #{section_id}, #{start_date}, #{due_date}, #{cre_date}, #{priority}, #{location})
	</insert>
	
	<insert id = "createTaskWithRole" parameterType = "com.spring.rollaboard.task.TaskVO">
		INSERT ALL
			INTO task (id, name, description, section_id, start_date, due_date, cre_date, priority)
			VALUES (seq_task.NEXTVAL, #{name}, #{description}, #{section_id}, #{start_date}, #{due_date}, #{cre_date}, #{priority})
			INTO task_role (TASK_ID, ROLE_ID) VALUES (seq_task.NEXTVAL, #{role_id})
				SELECT * FROM DUAL
	</insert>
	
	<update id = "updateTask" parameterType = "com.spring.rollaboard.task.TaskVO">
		UPDATE task SET DESCRIPTION = #{description}, 
					 NAME = #{name}, <!--
					 STATUS = #{status}, --> 
					 SECTION_ID = #{section_id}, 
					 START_DATE = #{start_date}, 
					 DUE_DATE = #{due_date}, 
					 PRIORITY = #{priority},
					 LOCATION = #{location}
					 WHERE ID = #{id}
	</update>
	
	<insert id = "taskToRole" parameterType = "map">
		INSERT INTO task_role (TASK_ID, ROLE_ID) VALUES (#{task_id}, #{role_id})
	</insert>
	
	<!-- turnBlocked -->
	<update id="turnBlocked" parameterType="map">
		UPDATE task
		SET status='BLOCKED'
		WHERE id=#{task_id} <!-- AND status='NORMAL' -->
	</update>
	<!-- turnNormal -->
	<update id="turnNormal" parameterType="map">
		UPDATE task
		SET status='NORMAL'
		WHERE id=#{task_id} <!-- AND status='BLOCKED' -->
	</update>
	<!-- turnComplete -->
	<update id="turnComplete" parameterType="map">
		UPDATE task
		SET status='COMPLETE'
		WHERE id=#{task_id} AND status='NORMAL'
	</update>
	
	<!-- turnStatusPostTask -->
	<update id="turnStatusPostTask" parameterType="map">
		MERGE INTO task ta
		    USING (
		        SELECT tc1.task_id task_id
		        FROM task_conn tc1, task_conn tc2
		        WHERE tc1.root_task_id=tc2.root_task_id
		            AND tc2.task_id=#{task_id} 
		            AND tc1.ref_level=(SELECT ref_level FROM task_conn WHERE task_id=#{task_id})+1
		    ) p_ta
		    ON (ta.id=p_ta.task_id)
		WHEN MATCHED THEN
		    UPDATE SET status=#{status} 
	</update>
	
	<!-- checkStatus -->
	<select id = "checkStatus" resultType="int" parameterType="map">
		SELECT count(*) 
		FROM task 
		WHERE id=#{task_id} 
			AND status=#{cond_status}
	</select>
	
	
	<!-- getConnectionTasks -->
	<select id="getConnectionTasks" parameterType="map" resultMap="TaskResultMap">
		SELECT ta.id id, ta.name name, ta.status status, ta.start_date start_date, ta.due_date due_date,
			ta.cre_date cre_date, ta.priority priority, ta.location location,
			taco.root_task_id section_id, se.name description
		FROM task ta, section se, task_conn taco
		WHERE ta.SECTION_ID=se.id AND ta.id=taco.task_id 
			AND board_id=#{board_id}
			AND (ta.name LIKE '%'||#{keyword}||'%' OR ta.description LIKE '%'||#{keyword}||'%') 
		ORDER BY taco.root_task_id ASC, taco.ref_level ASC
	</select>
</mapper>